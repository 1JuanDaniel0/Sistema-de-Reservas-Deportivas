package com.example.project.service;

import com.example.project.dto.ChatRequest;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

@Service
public class ActionDispatcher {

    @Autowired
    private ChatbotService chatbotService;

    public ResponseEntity<?> dispatch(ChatRequest chatRequest, HttpSession session) {
        String accion = chatRequest.getAccion();

        // Manejar cancelaci√≥n de flujo
        if ("cancelar_flujo".equalsIgnoreCase(accion)) {
            // Limpiar cualquier flujo activo
            session.removeAttribute("flujoActivo");
            session.removeAttribute("datosTemporales");

            // Marcar para limpiar contexto en pr√≥xima solicitud
            session.setAttribute("limpiarContexto", true);

            return chatbotService.respuestaSimple(
                    "‚úÖ Proceso cancelado. ¬øEn qu√© m√°s puedo ayudarte?",
                    "ninguna"
            );
        }

        // Siempre redirigir crear_reserva a ver_disponibilidad primero
        if ("crear_reserva".equalsIgnoreCase(accion)) {
            // Cambiar la acci√≥n para que pase por verificar disponibilidad
            chatRequest.setAccion("ver_disponibilidad");
            return chatbotService.flujoVerDisponibilidad(chatRequest, session);
        }

        if ("ver_disponibilidad".equalsIgnoreCase(accion)) {
            return chatbotService.flujoVerDisponibilidad(chatRequest, session);
        }

        if ("confirmar_reserva".equalsIgnoreCase(accion)) {
            // Limpiar contexto despu√©s de confirmar reserva
            ResponseEntity<?> respuesta = chatbotService.flujoCrearReserva(chatRequest, session);
            session.setAttribute("limpiarContexto", true);
            return respuesta;
        }

        if ("listar_lugares".equalsIgnoreCase(accion)) {
            session.setAttribute("limpiarContexto", true);
            return chatbotService.flujoListarLugares(chatRequest, session);
        }

        if ("listar_espacios".equalsIgnoreCase(accion)) {
            session.setAttribute("limpiarContexto", true);
            return chatbotService.flujoListarEspacios(chatRequest, session);
        }

        if ("ver_reservas".equalsIgnoreCase(accion)) {
            // Limpiar contexto antes de ver reservas
            session.setAttribute("limpiarContexto", true);
            return chatbotService.flujoVerReservas(chatRequest, session);
        }

        if ("cancelar_reserva".equalsIgnoreCase(accion)) {
            return chatbotService.flujoCancelarReserva(chatRequest, session);
        }

        // Manejar error temporal (429)
        if ("error_temporal".equalsIgnoreCase(accion)) {
            session.setAttribute("limpiarContexto", true);
            return chatbotService.respuestaSimple(
                    "‚ö†Ô∏è Hemos recibido muchas solicitudes. Intenta nuevamente en unos segundos.",
                    "ninguna"
            );
        }

        // Acci√≥n desconocida o no soportada
        return chatbotService.respuestaSimple("Lo siento, no entend√≠ tu solicitud üôÅ", "ninguna");
    }
}